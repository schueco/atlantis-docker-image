include:
  - project: 'plan.one/templates'
    file: '.docker-workflow-template.yml'
    ref: 'v4.1.1'
  - project: 'plan.one/templates'
    file: '.flux-workflow-template.yml'
    ref: 'v4.1.1'
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - lint
  - docker build
  - docker push
  - release
  - deploy

.only_mr:
  rules:
    - if: $CI_MERGE_REQUEST_IID

.only_main:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.node_caching:
  cache:
    key: "node"
    paths:
      - node_modules/

lint:docker:
  stage: lint
  extends:
    - .docker:lint
    - .only_mr

# Lint all commit messages in the merge request.
# Use interactive rebase or amend to fix messages and then git push --force-with-lease.
lint:commit:
  stage: lint
  extends:
    - .only_mr
    - .node_caching
  image: node:17.6.0
  before_script:
    - npm ci
  variables:
    # For being able to reliably move back to the merge base, a full clone is required...
    GIT_DEPTH: 0
  script:
    - npx commitlint --from="$(git merge-base HEAD "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}")"

docker:build:
  stage: docker build
  extends:
    - .docker:build

docker:push:latest:
  stage: docker push
  extends:
    - .docker:push
  only:
    - main
  variables:
    IMAGE_TAG: latest

docker:push:tag:
  stage: docker push
  extends:
    - .docker:push
  only:
    - tags
  variables:
    IMAGE_TAG: $CI_COMMIT_TAG

.release_setup:
  image: node:17
  stage: release
  before_script:
    - npm ci

release:test:
  extends:
    - .release_setup
    - .node_caching
    - .only_mr
  needs: []
  script:
    - npx semantic-release -d

release:
  extends:
    - .release_setup
    - .node_caching
    - .only_main
  script:
    - npx semantic-release

.deploy:
  extends: .deploy:flux2
  stage: deploy
  variables:
    NAMESPACE: atlantis
    NAME: atlantis

deploy:devservices:
  extends: .deploy
  variables:
    STAGE: devservices
  rules:
    # allow manual deploys on staging for merge requests
    - if: '$CI_MERGE_REQUEST_IID'
      when: manual
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      variables:
        IMAGE_TAG: "$CI_COMMIT_TAG"
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true

deploy:staging:
  extends: .deploy
  variables:
    STAGE: staging
  rules:
    # allow manual deploys on staging for merge requests
    - if: '$CI_MERGE_REQUEST_IID'
      when: manual
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      variables:
        IMAGE_TAG: "$CI_COMMIT_TAG"
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true

deploy:production:
  extends: .deploy
  variables:
    STAGE: production
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      variables:
        IMAGE_TAG: "$CI_COMMIT_TAG"
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true

deploy:bau365-production:
  extends: .deploy
  variables:
    STAGE: bau365-production
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      variables:
        IMAGE_TAG: "$CI_COMMIT_TAG"
      # don't require this step to happen
      # https://gitlab.com/gitlab-org/gitlab/-/issues/34077#note_308198797
      allow_failure: true
